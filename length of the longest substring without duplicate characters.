
Given a string s, find the length of the longest substring without duplicate characters.

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int n=s.size();
        int l=0;
        int r=0;
        vector<int> mpp(256,-1);
        int maxlen=0;
        while(r<n){
            int len=0;
            if(mpp[s[r]]>=l){
                l=mpp[s[r]]+1;
            }
            len=r-l+1;
            maxlen=max(len,maxlen);
            mpp[s[r]]=r;
            r++;
        }
        return maxlen;
    }
};
